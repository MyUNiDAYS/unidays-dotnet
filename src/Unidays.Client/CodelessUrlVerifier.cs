using System;
using System.Security.Cryptography;
using System.Text;
using System.Web;

namespace Unidays
{
    /// <summary>
    /// UNiDAYS SDK - Codeless API Helper Class
    /// </summary>
    public sealed class CodelessUrlVerifier
    {
        private readonly byte[] _key;

        public CodelessUrlVerifier(string key)
        {
            if (string.IsNullOrEmpty(key))
                throw new ArgumentNullException(nameof(key), "Key cannot be null or empty");

            try
            {
                _key = Convert.FromBase64String(key);
            }
            catch (FormatException)
            {
                throw new ArgumentException("Key must be valid Base64", nameof(key));
            }
        }

        private string StringToHmacSHA512(StringBuilder queryString)
        {
            using (var hmac = new HMACSHA512())
            {
                hmac.Key = _key;

                hmac.Initialize();
                var buffer = Encoding.ASCII.GetBytes(queryString.ToString());
                var signatureBytes = hmac.ComputeHash(buffer);
                var signature = Convert.ToBase64String(signatureBytes);
                return signature;
            }
        }

        /// <summary>
        /// Verifies that the url was generated by UNiDAYS and returns the time the url was generated if it is valid
        /// </summary>
        /// <param name="ud_s">The ud_s parameter from the url</param>
        /// <param name="ud_t">The ud_t parameter from the url</param>
        /// <param name="ud_h">The ud_h parameter from the url</param>
        /// <returns>The time that the url was generated if the url is verified, else null</returns>
        /// <exception cref="SystemException">Throws exception if the url is not able to be verified</exception>
        public DateTime? VerifyUrlParams(string ud_s, string ud_t, string ud_h)
        {
            var queryString = new StringBuilder();
            queryString.Append("?ud_s=").AppendFormat(HttpUtility.UrlEncode(ud_s) ?? "")
                        .Append("&ud_t=").AppendFormat(HttpUtility.UrlEncode(ud_t) ?? "");

            try
            {
                var hash = StringToHmacSHA512(queryString);

                if (ud_h != hash) return null;

                var timeSinceEpoch = Convert.ToInt64(ud_t);
                return new DateTime(timeSinceEpoch, DateTimeKind.Utc);
            }
            catch (Exception ex)
            {
                throw new Exception("Unable to verify URL", ex);
            }
        }

        /// <summary>
        /// Verifies that the url was generated by UNiDAYS and returns the time the url was generated if it is valid
        /// </summary>
        /// <param name="url">The url to be verified</param>
        /// <returns>The time that the url was generated if the url is verified, else null</returns>
        /// <exception cref="ArgumentException">Throws exception if any querystring parameter is null or empty</exception>
        public DateTime? VerifyUrl(Uri url)
        {
            var parameters = HttpUtility.ParseQueryString(url.Query);

            if (string.IsNullOrEmpty(parameters["ud_s"]) || string.IsNullOrEmpty(parameters["ud_t"]) || string.IsNullOrEmpty(parameters["ud_h"]))
                throw new ArgumentException("URL does not contain the required query parameters");

            return VerifyUrlParams(parameters["ud_s"], parameters["ud_t"], parameters["ud_h"]);
        }
    }
}
